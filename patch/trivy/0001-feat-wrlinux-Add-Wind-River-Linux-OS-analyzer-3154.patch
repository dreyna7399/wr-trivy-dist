From 260e608075b33ce7cabd41a45deba1f320f3b657 Mon Sep 17 00:00:00 2001
From: Sakib Sajal <you@example.com>
Date: Wed, 19 Oct 2022 03:51:15 -0400
Subject: [PATCH 1/3] feat(wrlinux): Add Wind River Linux OS analyzer (#3154)

Signed-off-by: Sakib Sajal <sakib.sajal@windriver.com>
---
 pkg/fanal/analyzer/all/import.go              |  1 +
 pkg/fanal/analyzer/const.go                   |  2 +
 .../analyzer/os/wrlinux/testdata/invalid      |  1 +
 .../analyzer/os/wrlinux/testdata/os-release   |  5 +
 pkg/fanal/analyzer/os/wrlinux/wrlinux.go      | 69 ++++++++++++++
 pkg/fanal/analyzer/os/wrlinux/wrlinux_test.go | 95 +++++++++++++++++++
 6 files changed, 173 insertions(+)
 create mode 100644 pkg/fanal/analyzer/os/wrlinux/testdata/invalid
 create mode 100644 pkg/fanal/analyzer/os/wrlinux/testdata/os-release
 create mode 100644 pkg/fanal/analyzer/os/wrlinux/wrlinux.go
 create mode 100644 pkg/fanal/analyzer/os/wrlinux/wrlinux_test.go

diff --git a/pkg/fanal/analyzer/all/import.go b/pkg/fanal/analyzer/all/import.go
index 5345073fd..90e848235 100644
--- a/pkg/fanal/analyzer/all/import.go
+++ b/pkg/fanal/analyzer/all/import.go
@@ -44,6 +44,7 @@ import (
 	_ "github.com/aquasecurity/trivy/pkg/fanal/analyzer/os/redhatbase"
 	_ "github.com/aquasecurity/trivy/pkg/fanal/analyzer/os/release"
 	_ "github.com/aquasecurity/trivy/pkg/fanal/analyzer/os/ubuntu"
+	_ "github.com/aquasecurity/trivy/pkg/fanal/analyzer/os/wrlinux"
 	_ "github.com/aquasecurity/trivy/pkg/fanal/analyzer/pkg/apk"
 	_ "github.com/aquasecurity/trivy/pkg/fanal/analyzer/pkg/dpkg"
 	_ "github.com/aquasecurity/trivy/pkg/fanal/analyzer/pkg/rpm"
diff --git a/pkg/fanal/analyzer/const.go b/pkg/fanal/analyzer/const.go
index a9733d4b6..49b1fd34e 100644
--- a/pkg/fanal/analyzer/const.go
+++ b/pkg/fanal/analyzer/const.go
@@ -26,6 +26,7 @@ const (
 	TypeSUSE       Type = "suse"
 	TypeUbuntu     Type = "ubuntu"
 	TypeUbuntuESM  Type = "ubuntu-esm"
+	TypeWRLinux    Type = "wrlinux"
 
 	// OS Package
 	TypeApk         Type = "apk"
@@ -163,6 +164,7 @@ var (
 		TypeRedHatBase,
 		TypeSUSE,
 		TypeUbuntu,
+		TypeWRLinux,
 		TypeApk,
 		TypeDpkg,
 		TypeDpkgLicense,
diff --git a/pkg/fanal/analyzer/os/wrlinux/testdata/invalid b/pkg/fanal/analyzer/os/wrlinux/testdata/invalid
new file mode 100644
index 000000000..574c7bd1e
--- /dev/null
+++ b/pkg/fanal/analyzer/os/wrlinux/testdata/invalid
@@ -0,0 +1 @@
+Red Hat Linux release 6.2 (Zoot)
diff --git a/pkg/fanal/analyzer/os/wrlinux/testdata/os-release b/pkg/fanal/analyzer/os/wrlinux/testdata/os-release
new file mode 100644
index 000000000..5cce85568
--- /dev/null
+++ b/pkg/fanal/analyzer/os/wrlinux/testdata/os-release
@@ -0,0 +1,5 @@
+ID=wrlinux-graphics
+NAME="Wind River Linux Graphics LTS"
+VERSION="10.21.20.5"
+VERSION_ID=10.21.20.5
+PRETTY_NAME="Wind River Linux Graphics LTS 21.20 Update 5"
diff --git a/pkg/fanal/analyzer/os/wrlinux/wrlinux.go b/pkg/fanal/analyzer/os/wrlinux/wrlinux.go
new file mode 100644
index 000000000..451067c01
--- /dev/null
+++ b/pkg/fanal/analyzer/os/wrlinux/wrlinux.go
@@ -0,0 +1,69 @@
+/*
+ * Copyright (c) 2022 Wind River Systems, Inc.
+ *
+ * The right to copy, distribute, modify, or otherwise make use
+ * of this software may be licensed only pursuant to the terms
+ * of an applicable Wind River license agreement.
+ */
+
+package wrlinux
+
+import (
+	"bufio"
+	"context"
+	"os"
+	"strings"
+
+	"golang.org/x/xerrors"
+
+	"github.com/aquasecurity/trivy/pkg/fanal/analyzer"
+	aos "github.com/aquasecurity/trivy/pkg/fanal/analyzer/os"
+	"github.com/aquasecurity/trivy/pkg/fanal/types"
+	"github.com/aquasecurity/trivy/pkg/fanal/utils"
+)
+
+func init() {
+	analyzer.RegisterAnalyzer(&wrlinuxOSAnalyzer{})
+}
+
+const version = 1
+
+var requiredFiles = []string{
+	"usr/lib/os-release",
+}
+
+type wrlinuxOSAnalyzer struct{}
+
+func (a wrlinuxOSAnalyzer) Analyze(_ context.Context, input analyzer.AnalysisInput) (*analyzer.AnalysisResult, error) {
+	wrlinuxName := ""
+	scanner := bufio.NewScanner(input.Content)
+	for scanner.Scan() {
+		line := scanner.Text()
+		if strings.HasPrefix(line, "NAME=\"Wind River Linux") {
+			wrlinuxName = aos.WRLinux
+			continue
+		}
+
+		if wrlinuxName != "" && strings.HasPrefix(line, "VERSION_ID=") {
+			return &analyzer.AnalysisResult{
+				OS: types.OS{
+					Family: wrlinuxName,
+					Name:   strings.TrimSpace(line[11:]),
+				},
+			}, nil
+		}
+	}
+	return nil, xerrors.Errorf("wrlinux: %w", aos.AnalyzeOSError)
+}
+
+func (a wrlinuxOSAnalyzer) Required(filePath string, _ os.FileInfo) bool {
+	return utils.StringInSlice(filePath, requiredFiles)
+}
+
+func (a wrlinuxOSAnalyzer) Type() analyzer.Type {
+	return analyzer.TypeWRLinux
+}
+
+func (a wrlinuxOSAnalyzer) Version() int {
+	return version
+}
diff --git a/pkg/fanal/analyzer/os/wrlinux/wrlinux_test.go b/pkg/fanal/analyzer/os/wrlinux/wrlinux_test.go
new file mode 100644
index 000000000..7b24fd851
--- /dev/null
+++ b/pkg/fanal/analyzer/os/wrlinux/wrlinux_test.go
@@ -0,0 +1,95 @@
+/*
+ * Copyright (c) 2022 Wind River Systems, Inc.
+ *
+ * The right to copy, distribute, modify, or otherwise make use
+ * of this software may be licensed only pursuant to the terms
+ * of an applicable Wind River license agreement.
+ */
+
+package wrlinux
+
+import (
+	"context"
+	"os"
+	"testing"
+
+	"github.com/aquasecurity/trivy/pkg/fanal/types"
+
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/require"
+
+	"github.com/aquasecurity/trivy/pkg/fanal/analyzer"
+)
+
+func Test_wrlinuxOSAnalyzer_Analyze(t *testing.T) {
+	tests := []struct {
+		name      string
+		inputFile string
+		want      *analyzer.AnalysisResult
+		wantErr   string
+	}{
+		{
+			name:      "happy path",
+			inputFile: "testdata/os-release",
+			want: &analyzer.AnalysisResult{
+				OS: &types.OS{
+					Family: "wrlinux",
+					Name:   "10.21.20.5",
+				},
+			},
+		},
+		{
+			name:      "sad path",
+			inputFile: "testdata/invalid",
+			wantErr:   "wrlinux: unable to analyze OS information",
+		},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			a := wrlinuxOSAnalyzer{}
+			f, err := os.Open(tt.inputFile)
+			require.NoError(t, err)
+			defer f.Close()
+
+			ctx := context.Background()
+			got, err := a.Analyze(ctx, analyzer.AnalysisInput{
+				FilePath: "usr/lib/os-release",
+				Content:  f,
+			})
+			if tt.wantErr != "" {
+				require.NotNil(t, err)
+				assert.Contains(t, err.Error(), tt.wantErr)
+				return
+			} else {
+				require.NoError(t, err)
+			}
+			assert.Equal(t, tt.want, got)
+		})
+	}
+}
+
+func Test_wrlinuxOSAnalyzer_Required(t *testing.T) {
+	tests := []struct {
+		name     string
+		filePath string
+		want     bool
+	}{
+		{
+			name:     "happy path",
+			filePath: "usr/lib/os-release",
+			want:     true,
+		},
+		{
+			name:     "sad path",
+			filePath: "usr/lib/invalid",
+			want:     false,
+		},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			a := wrlinuxOSAnalyzer{}
+			got := a.Required(tt.filePath, nil)
+			assert.Equal(t, tt.want, got)
+		})
+	}
+}
-- 
2.25.1

